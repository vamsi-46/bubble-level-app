package com.example.bubblelevel

import android.hardware.Sensor
import android.hardware.SensorEvent
import android.hardware.SensorEventListener
import android.hardware.SensorManager
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.text.BasicText
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.unit.dp
import androidx.compose.runtime.*
import androidx.compose.ui.tooling.preview.Preview
import com.example.bubblelevel.ui.theme.BubbleLevelTheme
import kotlin.math.*

class MainActivity : ComponentActivity() {
    private lateinit var sensorManager: SensorManager
    private var accelerometer: Sensor? = null
    private var listener: SensorEventListener? = null

    // State variables for tracking device orientation
    private var xValue by mutableStateOf(0f)
    private var yValue by mutableStateOf(0f)
    private var zValue by mutableStateOf(0f)
    
    // For holding the last 500 values
    private val sensorValuesQueueX = ArrayDeque<Float>(500)
    private val sensorValuesQueueY = ArrayDeque<Float>(500)

    // For tracking maximum and minimum angles in the last 500 samples
    private var maxAngleX by mutableStateOf(-Float.MAX_VALUE)
    private var minAngleX by mutableStateOf(Float.MAX_VALUE)
    private var maxAngleY by mutableStateOf(-Float.MAX_VALUE)
    private var minAngleY by mutableStateOf(Float.MAX_VALUE)
    
    // For the 2D bubble (angles for both X and Y)
    private var currentAngleX by mutableStateOf(0f)
    private var currentAngleY by mutableStateOf(0f)
    
    // Function to calculate the angle from accelerometer data
    private fun calculateAngles(x: Float, y: Float, z: Float): Pair<Float, Float> {
        val angleX = atan2(y.toDouble(), z.toDouble()) * (180 / Math.PI)  // X angle
        val angleY = atan2(x.toDouble(), z.toDouble()) * (180 / Math.PI)  // Y angle
        return angleX.toFloat() to angleY.toFloat()
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        sensorManager = getSystemService(SENSOR_SERVICE) as SensorManager
        accelerometer = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER)

        // Sensor event listener to detect changes in device orientation
        listener = object : SensorEventListener {
            override fun onSensorChanged(event: SensorEvent?) {
                event?.let {
                    if (it.sensor.type == Sensor.TYPE_ACCELEROMETER) {
                        // Fetch accelerometer values for X, Y, and Z axis
                        xValue = it.values[0]
                        yValue = it.values[1]
                        zValue = it.values[2]

                        // Calculate the angles for X and Y
                        val (angleX, angleY) = calculateAngles(xValue, yValue, zValue)
                        currentAngleX = angleX
                        currentAngleY = angleY

                        // Update the max and min angles for X and Y
                        if (angleX > maxAngleX) maxAngleX = angleX
                        if (angleX < minAngleX) minAngleX = angleX
                        if (angleY > maxAngleY) maxAngleY = angleY
                        if (angleY < minAngleY) minAngleY = angleY

                        // Maintain the last 500 values for X and Y
                        if (sensorValuesQueueX.size == 500) sensorValuesQueueX.removeFirst()
                        if (sensorValuesQueueY.size == 500) sensorValuesQueueY.removeFirst()
                        
                        sensorValuesQueueX.addLast(angleX)
                        sensorValuesQueueY.addLast(angleY)
                    }
                }
            }

            override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) {}
        }

        // Register sensor listener
        sensorManager.registerListener(listener, accelerometer, SensorManager.SENSOR_DELAY_UI)

        setContent {
            BubbleLevelTheme {
                Surface(modifier = Modifier.fillMaxSize(), color = MaterialTheme.colorScheme.background) {
                    DeviceOrientationView(currentAngleX, currentAngleY, maxAngleX, minAngleX, maxAngleY, minAngleY)
                }
            }
        }
    }

    // Clean up the sensor listener
    override fun onPause() {
        super.onPause()
        sensorManager.unregisterListener(listener)
    }

    // Composable to show both the 2D bubble level and the angles for both X and Y
    @Composable
    fun DeviceOrientationView(currentAngleX: Float, currentAngleY: Float, maxAngleX: Float, minAngleX: Float, maxAngleY: Float, minAngleY: Float) {
        Column(
            modifier = Modifier.fillMaxSize().padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            // Show the 2D bubble level and the current angles
            BubbleLevel2D(currentAngleX, currentAngleY)
            BasicText(text = "Angle X: ${currentAngleX.toInt()}°", style = MaterialTheme.typography.bodyLarge)
            BasicText(text = "Angle Y: ${currentAngleY.toInt()}°", style = MaterialTheme.typography.bodyLarge)

            // Show the max and min angles for X and Y
            BasicText(text = "Max Angle X: ${maxAngleX.toInt()}°", style = MaterialTheme.typography.bodyLarge)
            BasicText(text = "Min Angle X: ${minAngleX.toInt()}°", style = MaterialTheme.typography.bodyLarge)
            BasicText(text = "Max Angle Y: ${maxAngleY.toInt()}°", style = MaterialTheme.typography.bodyLarge)
            BasicText(text = "Min Angle Y: ${minAngleY.toInt()}°", style = MaterialTheme.typography.bodyLarge)
        }
    }

    // Composable for the 2D bubble level (device in portrait/landscape mode)
    @Composable
    fun BubbleLevel2D(currentAngleX: Float, currentAngleY: Float) {
        Canvas(modifier = Modifier.fillMaxSize()) {
            // Normalize the angles to stay within the [-10, 10] range
            val normalizedAngleX = currentAngleX.coerceIn(-10f, 10f)
            val normalizedAngleY = currentAngleY.coerceIn(-10f, 10f)

            val bubbleRadius = size.width * 0.1f
            val horizontalOffset = size.width / 2f + normalizedAngleX / 10f * (size.width / 2f - bubbleRadius)
            val verticalOffset = size.height / 2f + normalizedAngleY / 10f * (size.height / 2f - bubbleRadius)

            drawCircle(
                color = Color.Green,
                radius = bubbleRadius,
                center = Offset(horizontalOffset, verticalOffset)
            )
        }
    }

    // Preview the device orientation view
    @Preview(showBackground = true)
    @Composable
    fun DefaultPreview() {
        BubbleLevelTheme {
            DeviceOrientationView(
                currentAngleX = 0f, currentAngleY = 0f,
                maxAngleX = 5f, minAngleX = -5f,
                maxAngleY = 5f, minAngleY = -5f
            )
        }
    }
}